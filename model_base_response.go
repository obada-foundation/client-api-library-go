/*
 * OBADA Client Helper API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 0.0.1
 * Contact: techops@obada.io
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/obada-foundation/client-api-library-go

import (
	"encoding/json"
)

// BaseResponse struct for BaseResponse
type BaseResponse struct {
	Status *int32 `json:"status,omitempty"`
}

// NewBaseResponse instantiates a new BaseResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBaseResponse() *BaseResponse {
	this := BaseResponse{}
	return &this
}

// NewBaseResponseWithDefaults instantiates a new BaseResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBaseResponseWithDefaults() *BaseResponse {
	this := BaseResponse{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *BaseResponse) GetStatus() int32 {
	if o == nil || o.Status == nil {
		var ret int32
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BaseResponse) GetStatusOk() (*int32, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *BaseResponse) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given int32 and assigns it to the Status field.
func (o *BaseResponse) SetStatus(v int32) {
	o.Status = &v
}

func (o BaseResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableBaseResponse struct {
	value *BaseResponse
	isSet bool
}

func (v NullableBaseResponse) Get() *BaseResponse {
	return v.value
}

func (v *NullableBaseResponse) Set(val *BaseResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableBaseResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableBaseResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBaseResponse(val *BaseResponse) *NullableBaseResponse {
	return &NullableBaseResponse{value: val, isSet: true}
}

func (v NullableBaseResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBaseResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


