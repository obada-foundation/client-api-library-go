/*
OBADA API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: techops@obada.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/obada-foundation/client-api-library-go

import (
	"encoding/json"
)

// Obit OBADA record.
type Obit struct {
	// OBADA decentralized identifier
	Did *string `json:"did,omitempty"`
	// Test An 8-12 character “URL Shortened” obit. Create the USN by Base(58) encoding the OBIT ID. Take the first 8 characters. Check for duplicates. With 16 million OBITs there is a 40% chance of collision. If so, add 4 characters. Repeat as necessary until a unique USN is generated. 
	Usn *string `json:"usn,omitempty"`
	// Owner is the person/entity that owns the obit and the physical asset it represents. Format is a DID like did:obada:owner:1234. However in the current version only test numbers will be used.
	Owner *string `json:"owner,omitempty"`
	// Waiting more specific details from Rohi
	Manufacturer string `json:"manufacturer"`
	// Manufacturer provided. In cases where no part number is provided for the product, use model, or the most specific ID available from the manufacturer. MWCN2LL/A (an iPhone 11 Pro, Silver, 256GB, model A2160)
	PartNumber string `json:"part_number"`
	// Serial number hashed with sha256 hash function
	SerialNumberHash *string `json:"serial_number_hash,omitempty"`
	// JWT token from the trust anchor
	TrustAnchorToken *string `json:"trust_anchor_token,omitempty"`
	// Documents that are attached to Obit
	Documents []Document `json:"documents,omitempty"`
	// Hash calculated by SHA256 (previous Obit checksum + Obit data). 
	Checksum *string `json:"checksum,omitempty"`
}

// NewObit instantiates a new Obit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObit(manufacturer string, partNumber string) *Obit {
	this := Obit{}
	this.Manufacturer = manufacturer
	this.PartNumber = partNumber
	return &this
}

// NewObitWithDefaults instantiates a new Obit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObitWithDefaults() *Obit {
	this := Obit{}
	return &this
}

// GetDid returns the Did field value if set, zero value otherwise.
func (o *Obit) GetDid() string {
	if o == nil || o.Did == nil {
		var ret string
		return ret
	}
	return *o.Did
}

// GetDidOk returns a tuple with the Did field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Obit) GetDidOk() (*string, bool) {
	if o == nil || o.Did == nil {
		return nil, false
	}
	return o.Did, true
}

// HasDid returns a boolean if a field has been set.
func (o *Obit) HasDid() bool {
	if o != nil && o.Did != nil {
		return true
	}

	return false
}

// SetDid gets a reference to the given string and assigns it to the Did field.
func (o *Obit) SetDid(v string) {
	o.Did = &v
}

// GetUsn returns the Usn field value if set, zero value otherwise.
func (o *Obit) GetUsn() string {
	if o == nil || o.Usn == nil {
		var ret string
		return ret
	}
	return *o.Usn
}

// GetUsnOk returns a tuple with the Usn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Obit) GetUsnOk() (*string, bool) {
	if o == nil || o.Usn == nil {
		return nil, false
	}
	return o.Usn, true
}

// HasUsn returns a boolean if a field has been set.
func (o *Obit) HasUsn() bool {
	if o != nil && o.Usn != nil {
		return true
	}

	return false
}

// SetUsn gets a reference to the given string and assigns it to the Usn field.
func (o *Obit) SetUsn(v string) {
	o.Usn = &v
}

// GetOwner returns the Owner field value if set, zero value otherwise.
func (o *Obit) GetOwner() string {
	if o == nil || o.Owner == nil {
		var ret string
		return ret
	}
	return *o.Owner
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Obit) GetOwnerOk() (*string, bool) {
	if o == nil || o.Owner == nil {
		return nil, false
	}
	return o.Owner, true
}

// HasOwner returns a boolean if a field has been set.
func (o *Obit) HasOwner() bool {
	if o != nil && o.Owner != nil {
		return true
	}

	return false
}

// SetOwner gets a reference to the given string and assigns it to the Owner field.
func (o *Obit) SetOwner(v string) {
	o.Owner = &v
}

// GetManufacturer returns the Manufacturer field value
func (o *Obit) GetManufacturer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Manufacturer
}

// GetManufacturerOk returns a tuple with the Manufacturer field value
// and a boolean to check if the value has been set.
func (o *Obit) GetManufacturerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Manufacturer, true
}

// SetManufacturer sets field value
func (o *Obit) SetManufacturer(v string) {
	o.Manufacturer = v
}

// GetPartNumber returns the PartNumber field value
func (o *Obit) GetPartNumber() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PartNumber
}

// GetPartNumberOk returns a tuple with the PartNumber field value
// and a boolean to check if the value has been set.
func (o *Obit) GetPartNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PartNumber, true
}

// SetPartNumber sets field value
func (o *Obit) SetPartNumber(v string) {
	o.PartNumber = v
}

// GetSerialNumberHash returns the SerialNumberHash field value if set, zero value otherwise.
func (o *Obit) GetSerialNumberHash() string {
	if o == nil || o.SerialNumberHash == nil {
		var ret string
		return ret
	}
	return *o.SerialNumberHash
}

// GetSerialNumberHashOk returns a tuple with the SerialNumberHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Obit) GetSerialNumberHashOk() (*string, bool) {
	if o == nil || o.SerialNumberHash == nil {
		return nil, false
	}
	return o.SerialNumberHash, true
}

// HasSerialNumberHash returns a boolean if a field has been set.
func (o *Obit) HasSerialNumberHash() bool {
	if o != nil && o.SerialNumberHash != nil {
		return true
	}

	return false
}

// SetSerialNumberHash gets a reference to the given string and assigns it to the SerialNumberHash field.
func (o *Obit) SetSerialNumberHash(v string) {
	o.SerialNumberHash = &v
}

// GetTrustAnchorToken returns the TrustAnchorToken field value if set, zero value otherwise.
func (o *Obit) GetTrustAnchorToken() string {
	if o == nil || o.TrustAnchorToken == nil {
		var ret string
		return ret
	}
	return *o.TrustAnchorToken
}

// GetTrustAnchorTokenOk returns a tuple with the TrustAnchorToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Obit) GetTrustAnchorTokenOk() (*string, bool) {
	if o == nil || o.TrustAnchorToken == nil {
		return nil, false
	}
	return o.TrustAnchorToken, true
}

// HasTrustAnchorToken returns a boolean if a field has been set.
func (o *Obit) HasTrustAnchorToken() bool {
	if o != nil && o.TrustAnchorToken != nil {
		return true
	}

	return false
}

// SetTrustAnchorToken gets a reference to the given string and assigns it to the TrustAnchorToken field.
func (o *Obit) SetTrustAnchorToken(v string) {
	o.TrustAnchorToken = &v
}

// GetDocuments returns the Documents field value if set, zero value otherwise.
func (o *Obit) GetDocuments() []Document {
	if o == nil || o.Documents == nil {
		var ret []Document
		return ret
	}
	return o.Documents
}

// GetDocumentsOk returns a tuple with the Documents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Obit) GetDocumentsOk() ([]Document, bool) {
	if o == nil || o.Documents == nil {
		return nil, false
	}
	return o.Documents, true
}

// HasDocuments returns a boolean if a field has been set.
func (o *Obit) HasDocuments() bool {
	if o != nil && o.Documents != nil {
		return true
	}

	return false
}

// SetDocuments gets a reference to the given []Document and assigns it to the Documents field.
func (o *Obit) SetDocuments(v []Document) {
	o.Documents = v
}

// GetChecksum returns the Checksum field value if set, zero value otherwise.
func (o *Obit) GetChecksum() string {
	if o == nil || o.Checksum == nil {
		var ret string
		return ret
	}
	return *o.Checksum
}

// GetChecksumOk returns a tuple with the Checksum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Obit) GetChecksumOk() (*string, bool) {
	if o == nil || o.Checksum == nil {
		return nil, false
	}
	return o.Checksum, true
}

// HasChecksum returns a boolean if a field has been set.
func (o *Obit) HasChecksum() bool {
	if o != nil && o.Checksum != nil {
		return true
	}

	return false
}

// SetChecksum gets a reference to the given string and assigns it to the Checksum field.
func (o *Obit) SetChecksum(v string) {
	o.Checksum = &v
}

func (o Obit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Did != nil {
		toSerialize["did"] = o.Did
	}
	if o.Usn != nil {
		toSerialize["usn"] = o.Usn
	}
	if o.Owner != nil {
		toSerialize["owner"] = o.Owner
	}
	if true {
		toSerialize["manufacturer"] = o.Manufacturer
	}
	if true {
		toSerialize["part_number"] = o.PartNumber
	}
	if o.SerialNumberHash != nil {
		toSerialize["serial_number_hash"] = o.SerialNumberHash
	}
	if o.TrustAnchorToken != nil {
		toSerialize["trust_anchor_token"] = o.TrustAnchorToken
	}
	if o.Documents != nil {
		toSerialize["documents"] = o.Documents
	}
	if o.Checksum != nil {
		toSerialize["checksum"] = o.Checksum
	}
	return json.Marshal(toSerialize)
}

type NullableObit struct {
	value *Obit
	isSet bool
}

func (v NullableObit) Get() *Obit {
	return v.value
}

func (v *NullableObit) Set(val *Obit) {
	v.value = val
	v.isSet = true
}

func (v NullableObit) IsSet() bool {
	return v.isSet
}

func (v *NullableObit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObit(val *Obit) *NullableObit {
	return &NullableObit{value: val, isSet: true}
}

func (v NullableObit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


