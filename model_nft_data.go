/*
OBADA API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: techops@obada.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/obada-foundation/client-api-library-go

import (
	"encoding/json"
)

// NFTData struct for NFTData
type NFTData struct {
	TrustAnchorToken *string `json:"trust_anchor_token,omitempty"`
	Usn *string `json:"usn,omitempty"`
	Checksum *string `json:"checksum,omitempty"`
	Documents []NFTDocument `json:"documents,omitempty"`
}

// NewNFTData instantiates a new NFTData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNFTData() *NFTData {
	this := NFTData{}
	return &this
}

// NewNFTDataWithDefaults instantiates a new NFTData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNFTDataWithDefaults() *NFTData {
	this := NFTData{}
	return &this
}

// GetTrustAnchorToken returns the TrustAnchorToken field value if set, zero value otherwise.
func (o *NFTData) GetTrustAnchorToken() string {
	if o == nil || o.TrustAnchorToken == nil {
		var ret string
		return ret
	}
	return *o.TrustAnchorToken
}

// GetTrustAnchorTokenOk returns a tuple with the TrustAnchorToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFTData) GetTrustAnchorTokenOk() (*string, bool) {
	if o == nil || o.TrustAnchorToken == nil {
		return nil, false
	}
	return o.TrustAnchorToken, true
}

// HasTrustAnchorToken returns a boolean if a field has been set.
func (o *NFTData) HasTrustAnchorToken() bool {
	if o != nil && o.TrustAnchorToken != nil {
		return true
	}

	return false
}

// SetTrustAnchorToken gets a reference to the given string and assigns it to the TrustAnchorToken field.
func (o *NFTData) SetTrustAnchorToken(v string) {
	o.TrustAnchorToken = &v
}

// GetUsn returns the Usn field value if set, zero value otherwise.
func (o *NFTData) GetUsn() string {
	if o == nil || o.Usn == nil {
		var ret string
		return ret
	}
	return *o.Usn
}

// GetUsnOk returns a tuple with the Usn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFTData) GetUsnOk() (*string, bool) {
	if o == nil || o.Usn == nil {
		return nil, false
	}
	return o.Usn, true
}

// HasUsn returns a boolean if a field has been set.
func (o *NFTData) HasUsn() bool {
	if o != nil && o.Usn != nil {
		return true
	}

	return false
}

// SetUsn gets a reference to the given string and assigns it to the Usn field.
func (o *NFTData) SetUsn(v string) {
	o.Usn = &v
}

// GetChecksum returns the Checksum field value if set, zero value otherwise.
func (o *NFTData) GetChecksum() string {
	if o == nil || o.Checksum == nil {
		var ret string
		return ret
	}
	return *o.Checksum
}

// GetChecksumOk returns a tuple with the Checksum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFTData) GetChecksumOk() (*string, bool) {
	if o == nil || o.Checksum == nil {
		return nil, false
	}
	return o.Checksum, true
}

// HasChecksum returns a boolean if a field has been set.
func (o *NFTData) HasChecksum() bool {
	if o != nil && o.Checksum != nil {
		return true
	}

	return false
}

// SetChecksum gets a reference to the given string and assigns it to the Checksum field.
func (o *NFTData) SetChecksum(v string) {
	o.Checksum = &v
}

// GetDocuments returns the Documents field value if set, zero value otherwise.
func (o *NFTData) GetDocuments() []NFTDocument {
	if o == nil || o.Documents == nil {
		var ret []NFTDocument
		return ret
	}
	return o.Documents
}

// GetDocumentsOk returns a tuple with the Documents field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFTData) GetDocumentsOk() ([]NFTDocument, bool) {
	if o == nil || o.Documents == nil {
		return nil, false
	}
	return o.Documents, true
}

// HasDocuments returns a boolean if a field has been set.
func (o *NFTData) HasDocuments() bool {
	if o != nil && o.Documents != nil {
		return true
	}

	return false
}

// SetDocuments gets a reference to the given []NFTDocument and assigns it to the Documents field.
func (o *NFTData) SetDocuments(v []NFTDocument) {
	o.Documents = v
}

func (o NFTData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TrustAnchorToken != nil {
		toSerialize["trust_anchor_token"] = o.TrustAnchorToken
	}
	if o.Usn != nil {
		toSerialize["usn"] = o.Usn
	}
	if o.Checksum != nil {
		toSerialize["checksum"] = o.Checksum
	}
	if o.Documents != nil {
		toSerialize["documents"] = o.Documents
	}
	return json.Marshal(toSerialize)
}

type NullableNFTData struct {
	value *NFTData
	isSet bool
}

func (v NullableNFTData) Get() *NFTData {
	return v.value
}

func (v *NullableNFTData) Set(val *NFTData) {
	v.value = val
	v.isSet = true
}

func (v NullableNFTData) IsSet() bool {
	return v.isSet
}

func (v *NullableNFTData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNFTData(val *NFTData) *NullableNFTData {
	return &NullableNFTData{value: val, isSet: true}
}

func (v NullableNFTData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNFTData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


