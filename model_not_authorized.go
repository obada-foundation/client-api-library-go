/*
OBADA API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: techops@obada.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/obada-foundation/client-api-library-go

import (
	"encoding/json"
)

// NotAuthorized A typical 401 error.
type NotAuthorized struct {
	Error *string `json:"error,omitempty"`
}

// NewNotAuthorized instantiates a new NotAuthorized object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotAuthorized() *NotAuthorized {
	this := NotAuthorized{}
	var error_ string = "Not authorized"
	this.Error = &error_
	return &this
}

// NewNotAuthorizedWithDefaults instantiates a new NotAuthorized object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotAuthorizedWithDefaults() *NotAuthorized {
	this := NotAuthorized{}
	var error_ string = "Not authorized"
	this.Error = &error_
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *NotAuthorized) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotAuthorized) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *NotAuthorized) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *NotAuthorized) SetError(v string) {
	o.Error = &v
}

func (o NotAuthorized) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableNotAuthorized struct {
	value *NotAuthorized
	isSet bool
}

func (v NullableNotAuthorized) Get() *NotAuthorized {
	return v.value
}

func (v *NullableNotAuthorized) Set(val *NotAuthorized) {
	v.value = val
	v.isSet = true
}

func (v NullableNotAuthorized) IsSet() bool {
	return v.isSet
}

func (v *NullableNotAuthorized) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotAuthorized(val *NotAuthorized) *NullableNotAuthorized {
	return &NullableNotAuthorized{value: val, isSet: true}
}

func (v NullableNotAuthorized) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotAuthorized) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


