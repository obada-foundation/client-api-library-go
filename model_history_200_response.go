/*
OBADA API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: techops@obada.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/obada-foundation/client-api-library-go

import (
	"encoding/json"
)

// History200Response struct for History200Response
type History200Response struct {
	Data []ObitHistory `json:"data,omitempty"`
}

// NewHistory200Response instantiates a new History200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHistory200Response() *History200Response {
	this := History200Response{}
	return &this
}

// NewHistory200ResponseWithDefaults instantiates a new History200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHistory200ResponseWithDefaults() *History200Response {
	this := History200Response{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *History200Response) GetData() []ObitHistory {
	if o == nil || o.Data == nil {
		var ret []ObitHistory
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *History200Response) GetDataOk() ([]ObitHistory, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *History200Response) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given []ObitHistory and assigns it to the Data field.
func (o *History200Response) SetData(v []ObitHistory) {
	o.Data = v
}

func (o History200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableHistory200Response struct {
	value *History200Response
	isSet bool
}

func (v NullableHistory200Response) Get() *History200Response {
	return v.value
}

func (v *NullableHistory200Response) Set(val *History200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableHistory200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableHistory200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHistory200Response(val *History200Response) *NullableHistory200Response {
	return &NullableHistory200Response{value: val, isSet: true}
}

func (v NullableHistory200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHistory200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


