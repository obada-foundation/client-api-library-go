/*
OBADA API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: techops@obada.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/obada-foundation/client-api-library-go

import (
	"encoding/json"
)

// NFT OBADA NFT
type NFT struct {
	ClassId *string `json:"class_id,omitempty"`
	Id *string `json:"id,omitempty"`
	Uri *string `json:"uri,omitempty"`
	UriHash *string `json:"uri_hash,omitempty"`
	Data *NFTData `json:"data,omitempty"`
}

// NewNFT instantiates a new NFT object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNFT() *NFT {
	this := NFT{}
	return &this
}

// NewNFTWithDefaults instantiates a new NFT object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNFTWithDefaults() *NFT {
	this := NFT{}
	return &this
}

// GetClassId returns the ClassId field value if set, zero value otherwise.
func (o *NFT) GetClassId() string {
	if o == nil || o.ClassId == nil {
		var ret string
		return ret
	}
	return *o.ClassId
}

// GetClassIdOk returns a tuple with the ClassId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFT) GetClassIdOk() (*string, bool) {
	if o == nil || o.ClassId == nil {
		return nil, false
	}
	return o.ClassId, true
}

// HasClassId returns a boolean if a field has been set.
func (o *NFT) HasClassId() bool {
	if o != nil && o.ClassId != nil {
		return true
	}

	return false
}

// SetClassId gets a reference to the given string and assigns it to the ClassId field.
func (o *NFT) SetClassId(v string) {
	o.ClassId = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NFT) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFT) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NFT) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NFT) SetId(v string) {
	o.Id = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *NFT) GetUri() string {
	if o == nil || o.Uri == nil {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFT) GetUriOk() (*string, bool) {
	if o == nil || o.Uri == nil {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *NFT) HasUri() bool {
	if o != nil && o.Uri != nil {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *NFT) SetUri(v string) {
	o.Uri = &v
}

// GetUriHash returns the UriHash field value if set, zero value otherwise.
func (o *NFT) GetUriHash() string {
	if o == nil || o.UriHash == nil {
		var ret string
		return ret
	}
	return *o.UriHash
}

// GetUriHashOk returns a tuple with the UriHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFT) GetUriHashOk() (*string, bool) {
	if o == nil || o.UriHash == nil {
		return nil, false
	}
	return o.UriHash, true
}

// HasUriHash returns a boolean if a field has been set.
func (o *NFT) HasUriHash() bool {
	if o != nil && o.UriHash != nil {
		return true
	}

	return false
}

// SetUriHash gets a reference to the given string and assigns it to the UriHash field.
func (o *NFT) SetUriHash(v string) {
	o.UriHash = &v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *NFT) GetData() NFTData {
	if o == nil || o.Data == nil {
		var ret NFTData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFT) GetDataOk() (*NFTData, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *NFT) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given NFTData and assigns it to the Data field.
func (o *NFT) SetData(v NFTData) {
	o.Data = &v
}

func (o NFT) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClassId != nil {
		toSerialize["class_id"] = o.ClassId
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Uri != nil {
		toSerialize["uri"] = o.Uri
	}
	if o.UriHash != nil {
		toSerialize["uri_hash"] = o.UriHash
	}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	return json.Marshal(toSerialize)
}

type NullableNFT struct {
	value *NFT
	isSet bool
}

func (v NullableNFT) Get() *NFT {
	return v.value
}

func (v *NullableNFT) Set(val *NFT) {
	v.value = val
	v.isSet = true
}

func (v NullableNFT) IsSet() bool {
	return v.isSet
}

func (v *NullableNFT) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNFT(val *NFT) *NullableNFT {
	return &NullableNFT{value: val, isSet: true}
}

func (v NullableNFT) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNFT) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


