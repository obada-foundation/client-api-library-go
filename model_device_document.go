/*
OBADA API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: techops@obada.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/obada-foundation/client-api-library-go

import (
	"encoding/json"
)

// DeviceDocument Device Document
type DeviceDocument struct {
	// Associative name of device document
	Name string `json:"name"`
	DocumentFile string `json:"document_file"`
	// If true then client helper will encrypt document with account key
	ShouldEncrypt *bool `json:"should_encrypt,omitempty"`
}

// NewDeviceDocument instantiates a new DeviceDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceDocument(name string, documentFile string) *DeviceDocument {
	this := DeviceDocument{}
	this.Name = name
	this.DocumentFile = documentFile
	var shouldEncrypt bool = true
	this.ShouldEncrypt = &shouldEncrypt
	return &this
}

// NewDeviceDocumentWithDefaults instantiates a new DeviceDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceDocumentWithDefaults() *DeviceDocument {
	this := DeviceDocument{}
	var shouldEncrypt bool = true
	this.ShouldEncrypt = &shouldEncrypt
	return &this
}

// GetName returns the Name field value
func (o *DeviceDocument) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DeviceDocument) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DeviceDocument) SetName(v string) {
	o.Name = v
}

// GetDocumentFile returns the DocumentFile field value
func (o *DeviceDocument) GetDocumentFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DocumentFile
}

// GetDocumentFileOk returns a tuple with the DocumentFile field value
// and a boolean to check if the value has been set.
func (o *DeviceDocument) GetDocumentFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DocumentFile, true
}

// SetDocumentFile sets field value
func (o *DeviceDocument) SetDocumentFile(v string) {
	o.DocumentFile = v
}

// GetShouldEncrypt returns the ShouldEncrypt field value if set, zero value otherwise.
func (o *DeviceDocument) GetShouldEncrypt() bool {
	if o == nil || o.ShouldEncrypt == nil {
		var ret bool
		return ret
	}
	return *o.ShouldEncrypt
}

// GetShouldEncryptOk returns a tuple with the ShouldEncrypt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeviceDocument) GetShouldEncryptOk() (*bool, bool) {
	if o == nil || o.ShouldEncrypt == nil {
		return nil, false
	}
	return o.ShouldEncrypt, true
}

// HasShouldEncrypt returns a boolean if a field has been set.
func (o *DeviceDocument) HasShouldEncrypt() bool {
	if o != nil && o.ShouldEncrypt != nil {
		return true
	}

	return false
}

// SetShouldEncrypt gets a reference to the given bool and assigns it to the ShouldEncrypt field.
func (o *DeviceDocument) SetShouldEncrypt(v bool) {
	o.ShouldEncrypt = &v
}

func (o DeviceDocument) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["document_file"] = o.DocumentFile
	}
	if o.ShouldEncrypt != nil {
		toSerialize["should_encrypt"] = o.ShouldEncrypt
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceDocument struct {
	value *DeviceDocument
	isSet bool
}

func (v NullableDeviceDocument) Get() *DeviceDocument {
	return v.value
}

func (v *NullableDeviceDocument) Set(val *DeviceDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceDocument(val *DeviceDocument) *NullableDeviceDocument {
	return &NullableDeviceDocument{value: val, isSet: true}
}

func (v NullableDeviceDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


