/*
OBADA API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: techops@obada.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/obada-foundation/client-api-library-go

import (
	"encoding/json"
)

// SendNFTRequest Transfer NFT payload
type SendNFTRequest struct {
	// OBADA blockchain receiver address
	Receiver string `json:"receiver"`
}

// NewSendNFTRequest instantiates a new SendNFTRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSendNFTRequest(receiver string) *SendNFTRequest {
	this := SendNFTRequest{}
	this.Receiver = receiver
	return &this
}

// NewSendNFTRequestWithDefaults instantiates a new SendNFTRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSendNFTRequestWithDefaults() *SendNFTRequest {
	this := SendNFTRequest{}
	return &this
}

// GetReceiver returns the Receiver field value
func (o *SendNFTRequest) GetReceiver() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Receiver
}

// GetReceiverOk returns a tuple with the Receiver field value
// and a boolean to check if the value has been set.
func (o *SendNFTRequest) GetReceiverOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Receiver, true
}

// SetReceiver sets field value
func (o *SendNFTRequest) SetReceiver(v string) {
	o.Receiver = v
}

func (o SendNFTRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["receiver"] = o.Receiver
	}
	return json.Marshal(toSerialize)
}

type NullableSendNFTRequest struct {
	value *SendNFTRequest
	isSet bool
}

func (v NullableSendNFTRequest) Get() *SendNFTRequest {
	return v.value
}

func (v *NullableSendNFTRequest) Set(val *SendNFTRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSendNFTRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSendNFTRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSendNFTRequest(val *SendNFTRequest) *NullableSendNFTRequest {
	return &NullableSendNFTRequest{value: val, isSet: true}
}

func (v NullableSendNFTRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSendNFTRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


