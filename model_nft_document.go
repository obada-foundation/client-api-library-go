/*
OBADA API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: techops@obada.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/obada-foundation/client-api-library-go

import (
	"encoding/json"
)

// NFTDocument OBADA NFT document
type NFTDocument struct {
	Name *string `json:"name,omitempty"`
	Uri *string `json:"uri,omitempty"`
	Hash *string `json:"hash,omitempty"`
}

// NewNFTDocument instantiates a new NFTDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNFTDocument() *NFTDocument {
	this := NFTDocument{}
	return &this
}

// NewNFTDocumentWithDefaults instantiates a new NFTDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNFTDocumentWithDefaults() *NFTDocument {
	this := NFTDocument{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *NFTDocument) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFTDocument) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *NFTDocument) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *NFTDocument) SetName(v string) {
	o.Name = &v
}

// GetUri returns the Uri field value if set, zero value otherwise.
func (o *NFTDocument) GetUri() string {
	if o == nil || o.Uri == nil {
		var ret string
		return ret
	}
	return *o.Uri
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFTDocument) GetUriOk() (*string, bool) {
	if o == nil || o.Uri == nil {
		return nil, false
	}
	return o.Uri, true
}

// HasUri returns a boolean if a field has been set.
func (o *NFTDocument) HasUri() bool {
	if o != nil && o.Uri != nil {
		return true
	}

	return false
}

// SetUri gets a reference to the given string and assigns it to the Uri field.
func (o *NFTDocument) SetUri(v string) {
	o.Uri = &v
}

// GetHash returns the Hash field value if set, zero value otherwise.
func (o *NFTDocument) GetHash() string {
	if o == nil || o.Hash == nil {
		var ret string
		return ret
	}
	return *o.Hash
}

// GetHashOk returns a tuple with the Hash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NFTDocument) GetHashOk() (*string, bool) {
	if o == nil || o.Hash == nil {
		return nil, false
	}
	return o.Hash, true
}

// HasHash returns a boolean if a field has been set.
func (o *NFTDocument) HasHash() bool {
	if o != nil && o.Hash != nil {
		return true
	}

	return false
}

// SetHash gets a reference to the given string and assigns it to the Hash field.
func (o *NFTDocument) SetHash(v string) {
	o.Hash = &v
}

func (o NFTDocument) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Uri != nil {
		toSerialize["uri"] = o.Uri
	}
	if o.Hash != nil {
		toSerialize["hash"] = o.Hash
	}
	return json.Marshal(toSerialize)
}

type NullableNFTDocument struct {
	value *NFTDocument
	isSet bool
}

func (v NullableNFTDocument) Get() *NFTDocument {
	return v.value
}

func (v *NullableNFTDocument) Set(val *NFTDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableNFTDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableNFTDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNFTDocument(val *NFTDocument) *NullableNFTDocument {
	return &NullableNFTDocument{value: val, isSet: true}
}

func (v NullableNFTDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNFTDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


