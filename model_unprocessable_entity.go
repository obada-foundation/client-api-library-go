/*
OBADA API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.0.1
Contact: techops@obada.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package github.com/obada-foundation/client-api-library-go

import (
	"encoding/json"
)

// UnprocessableEntity A typical 422 error.
type UnprocessableEntity struct {
	Error *string `json:"error,omitempty"`
	Fields []UnprocessableEntityFieldsInner `json:"fields,omitempty"`
}

// NewUnprocessableEntity instantiates a new UnprocessableEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnprocessableEntity() *UnprocessableEntity {
	this := UnprocessableEntity{}
	var error_ string = "data validation error"
	this.Error = &error_
	return &this
}

// NewUnprocessableEntityWithDefaults instantiates a new UnprocessableEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnprocessableEntityWithDefaults() *UnprocessableEntity {
	this := UnprocessableEntity{}
	var error_ string = "data validation error"
	this.Error = &error_
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *UnprocessableEntity) GetError() string {
	if o == nil || o.Error == nil {
		var ret string
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnprocessableEntity) GetErrorOk() (*string, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *UnprocessableEntity) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given string and assigns it to the Error field.
func (o *UnprocessableEntity) SetError(v string) {
	o.Error = &v
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *UnprocessableEntity) GetFields() []UnprocessableEntityFieldsInner {
	if o == nil || o.Fields == nil {
		var ret []UnprocessableEntityFieldsInner
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnprocessableEntity) GetFieldsOk() ([]UnprocessableEntityFieldsInner, bool) {
	if o == nil || o.Fields == nil {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *UnprocessableEntity) HasFields() bool {
	if o != nil && o.Fields != nil {
		return true
	}

	return false
}

// SetFields gets a reference to the given []UnprocessableEntityFieldsInner and assigns it to the Fields field.
func (o *UnprocessableEntity) SetFields(v []UnprocessableEntityFieldsInner) {
	o.Fields = v
}

func (o UnprocessableEntity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.Fields != nil {
		toSerialize["fields"] = o.Fields
	}
	return json.Marshal(toSerialize)
}

type NullableUnprocessableEntity struct {
	value *UnprocessableEntity
	isSet bool
}

func (v NullableUnprocessableEntity) Get() *UnprocessableEntity {
	return v.value
}

func (v *NullableUnprocessableEntity) Set(val *UnprocessableEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableUnprocessableEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableUnprocessableEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnprocessableEntity(val *UnprocessableEntity) *NullableUnprocessableEntity {
	return &NullableUnprocessableEntity{value: val, isSet: true}
}

func (v NullableUnprocessableEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnprocessableEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


